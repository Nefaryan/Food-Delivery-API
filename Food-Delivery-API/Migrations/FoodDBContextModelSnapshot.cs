// <auto-generated />
using System;
using FoodDataLayer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Food_Delivery_API.Migrations
{
    [DbContext(typeof(FoodDBContext))]
    partial class FoodDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodDataLayer.Models.Food.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GramasOfFat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GramsOfCarboidrate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GramsOfProtein")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NutritionalVelue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PreparationTime")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ResturantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ResturantId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Resturant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("CloseingTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeingTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("ResturantOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResturantOwnerId");

                    b.ToTable("Resturants");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RiderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingAddres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDataLayer.Util.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FiscalCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("FiscalCode")
                        .IsUnique()
                        .HasFilter("[FiscalCode] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Ingredient", b =>
                {
                    b.HasOne("FoodDataLayer.Models.Food.Product", null)
                        .WithMany("Ingredeints")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Product", b =>
                {
                    b.HasOne("FoodDataLayer.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("FoodDataLayer.Models.Food.Resturant", null)
                        .WithMany("Menu")
                        .HasForeignKey("ResturantId");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Resturant", b =>
                {
                    b.HasOne("FoodDataLayer.Util.User", "ResturantOwner")
                        .WithMany()
                        .HasForeignKey("ResturantOwnerId");

                    b.Navigation("ResturantOwner");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Order", b =>
                {
                    b.HasOne("FoodDataLayer.Util.User", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId");

                    b.HasOne("FoodDataLayer.Util.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Rider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Product", b =>
                {
                    b.Navigation("Ingredeints");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Food.Resturant", b =>
                {
                    b.Navigation("Menu");
                });

            modelBuilder.Entity("FoodDataLayer.Models.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
